(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){"use strict";/*!
  DT - 0.9.1
  License: Apache 2
*/
var Heap_1=require("../src/Heap");exports.Heap=Heap_1.Heap;var Queue_1=require("../src/Queue");exports.Queue=Queue_1.Queue;var BinaryTree_1=require("../src/BinaryTree");exports.BinaryTree=BinaryTree_1.BinaryTree;var Tree_1=require("../src/Tree");exports.Tree=Tree_1.Tree;var Graph_1=require("../src/Graph");exports.Graph=Graph_1.Graph;var Stack_1=require("../src/Stack");exports.Stack=Stack_1.Stack;var HashTable_1=require("../src/HashTable");exports.HashTable=HashTable_1.HashTable;var LinkedList_1=require("../src/LinkedList");exports.LinkedList=LinkedList_1.SimpleList;var DoubleLinkedList_1=require("../src/DoubleLinkedList");exports.DoubleLinkedList=DoubleLinkedList_1.DoubleLinkedList;exports.DoubleListIterator=DoubleLinkedList_1.DoubleListIterator},{"../src/BinaryTree":2,"../src/DoubleLinkedList":3,"../src/Graph":4,"../src/HashTable":5,"../src/Heap":6,"../src/LinkedList":7,"../src/Queue":8,"../src/Stack":9,"../src/Tree":10}],2:[function(require,module,exports){"use strict";var BinaryTree=function(){function BinaryTree(){this._parent=null;this._left=null;this._right=null}BinaryTree.prototype.setValue=function(value){this._value=value;return this};BinaryTree.prototype.getValue=function(){return this._value};BinaryTree.prototype.setParent=function(tree){this._parent=tree;return this};BinaryTree.prototype.getParent=function(){return this._parent};BinaryTree.prototype.setLeft=function(tree){this._left=tree;this._left.setParent(this);return this};BinaryTree.prototype.getLeft=function(){return this._left};BinaryTree.prototype.setRight=function(tree){this._right=tree;this._right.setParent(this);return this};BinaryTree.prototype.getRight=function(){return this._right};BinaryTree.prototype.setComparer=function(func){this._comparer=func;if(this._left!=null){this._left.setComparer(func)}if(this._right!=null){this._right.setComparer(func)}};BinaryTree.prototype.getComparer=function(){return this._comparer};BinaryTree.prototype.setTraversalFunction=function(func){this._traversalFunction=func;if(this._left){this._left.setTraversalFunction(func)}if(this._right){this._left.setTraversalFunction(func)}};BinaryTree.prototype.getTraversalFunction=function(){return this._traversalFunction};BinaryTree.prototype.getRoot=function(){var tree=this;while(tree._parent!=null){tree=tree._parent}return tree};BinaryTree.prototype.isRoot=function(){return this._parent!=null};BinaryTree.prototype.isFull=function(){return this._left!=null&&this._right!=null};
//TODO : Comparer deberia ser una interfaz?
BinaryTree.prototype.insert=function(data,comparer){if(comparer){this.setComparer(comparer)}var current=this.getRoot();if(current.getValue()===null){current.setValue(data);return}var tempNode=(new BinaryTree).setValue(data);while(current!=null){var parent_1=current;var result=this._comparer(data,current.getValue());if(result==true){current=current.getLeft();if(current===null){parent_1.setLeft(tempNode);break}}else{current=current.getRight();if(current===null){parent_1.setRight(tempNode);break}}}return this};BinaryTree.prototype.search=function(value,comparer){if(comparer){this.setComparer(comparer)}var current=this.getRoot();if(current.getValue()==value){return current}var tempNode=(new BinaryTree).setValue(value);while(current.getValue()!=value){var result=this._comparer(value,current.getValue());if(result==true){current=current.getLeft()}else{current=current.getRight()}if(current==null){return null}}return current};BinaryTree.prototype.preOrderTraversal=function(tree,func){if(func){this.setTraversalFunction(func)}if(tree==null){return}this._traversalFunction(tree._value);this.preOrderTraversal(tree._left);this.preOrderTraversal(tree._right)};BinaryTree.prototype.inOrderTraversal=function(tree,func){if(func){this.setTraversalFunction(func)}if(tree==null){return}this.inOrderTraversal(tree._left);this._traversalFunction(tree._value);this.inOrderTraversal(tree._right)};BinaryTree.prototype.postOrderTraversal=function(tree,func){if(func){this.setTraversalFunction(func)}if(tree==null){return}this.postOrderTraversal(tree._left);this.postOrderTraversal(tree._right);this._traversalFunction(tree._value)};BinaryTree.prototype.getCount=function(){var count=1;if(this._left!=null){count+=this._left.getCount()}if(this._right!=null){count+=this._right.getCount()}return count};return BinaryTree}();exports.BinaryTree=BinaryTree},{}],3:[function(require,module,exports){"use strict";var DoubleLinkedList=function(){function DoubleLinkedList(){this._head=null;this._tail=null;this._count=0}DoubleLinkedList.prototype.getHead=function(){return this._head};DoubleLinkedList.prototype.getTail=function(){return this._tail};DoubleLinkedList.prototype.getCount=function(){return this._count};DoubleLinkedList.prototype.append=function(value){var node=new ListNode;node.setValue(value);if(this._head==null){this._head=node;this._tail=node}else{node.setPrevious(this._tail);this._tail.setNext(node);this._tail=node}this._count++;return this};DoubleLinkedList.prototype.prepend=function(value){var newNode=new ListNode;newNode.setValue(value);newNode.setNext(this._head);this._head=newNode;if(this._tail==null){this._tail=this._head}this._count++;return this};DoubleLinkedList.prototype.removeHead=function(){if(this._head!=null){var newNode=null;newNode=this._head.getNext();this._head=null;this._head=newNode;if(this._head==null){this._tail=null}this._count--}return this};DoubleLinkedList.prototype.removeTail=function(){var headNodePointer=this._head;if(this._head!=null){if(this._head==this._tail){this._head=null;this._tail=null}else{while(headNodePointer.getNext()!=this._tail){headNodePointer=headNodePointer.getNext()}this._tail=headNodePointer;headNodePointer.setNext(null)}this._count--}return this};DoubleLinkedList.prototype.getIterator=function(){return new DoubleListIterator(this,this._head)};DoubleLinkedList.prototype.insert=function(iterator,value){if(iterator.getList()!=this){return}if(iterator.getNode()!=null){iterator.getNode().insertAfter(value);if(iterator.getNode()==this._tail){this._tail=iterator.getNode().getNext()}this._count++}else{this.append(value)}return this};DoubleLinkedList.prototype.remove=function(iterator){var headNodePointer=this._head;if(iterator.getList()!=this){return}if(iterator.getNode()==null){return}if(iterator.getNode()==this._head){iterator.forth();this.removeHead()}else if(iterator.getNode()==this._tail){this.removeTail()}else{while(headNodePointer.getNext()!=iterator.getNode()){headNodePointer=headNodePointer.getNext()}iterator.forth();headNodePointer.setNext(null);headNodePointer.setNext(iterator.getNode());headNodePointer.getNext().setPrevious(headNodePointer)}return this};DoubleLinkedList.prototype.traverse=function(func){var current=this._head;while(current!=null){current.setValue(func(current.getValue()));current=current.getNext()}};return DoubleLinkedList}();exports.DoubleLinkedList=DoubleLinkedList;
// TODO: Define iterator as an interface
var DoubleListIterator=function(){function DoubleListIterator(list,node){if(list===void 0){list=null}if(node===void 0){node=null}this._mainNode=node;this._list=list}DoubleListIterator.prototype.getList=function(){return this._list};DoubleListIterator.prototype.getNode=function(){return this._mainNode};DoubleListIterator.prototype.start=function(){if(this._list!=null){this._mainNode=this._list.getHead()}return this};DoubleListIterator.prototype.forth=function(){if(this._mainNode!=null){this._mainNode=this._mainNode.getNext()}return this};DoubleListIterator.prototype.backward=function(){if(this._mainNode!=null){this._mainNode=this._mainNode.getPrevious()}return this};DoubleListIterator.prototype.getItem=function(){return this._mainNode.getValue()};DoubleListIterator.prototype.isValid=function(){return this._mainNode!=null};return DoubleListIterator}();exports.DoubleListIterator=DoubleListIterator;var ListNode=function(){function ListNode(){this._previous=null;this._next=null}ListNode.prototype.insertAfter=function(value){var newNode=new ListNode;newNode._data=value;newNode._next=this._next;this._next=newNode};ListNode.prototype.setValue=function(value){this._data=value;return this};ListNode.prototype.getValue=function(){return this._data};ListNode.prototype.getNext=function(){return this._next};ListNode.prototype.setNext=function(value){this._next=value;return this};ListNode.prototype.getPrevious=function(){return this._previous};ListNode.prototype.setPrevious=function(node){return this._previous=node};return ListNode}();exports.ListNode=ListNode},{}],4:[function(require,module,exports){"use strict";
/// <reference path="./LinkedList.ts"/>
var list=require("./LinkedList");var Queue_1=require("./Queue");var GraphArc=function(){function GraphArc(){}GraphArc.prototype.getNode=function(){return this._node};GraphArc.prototype.setNode=function(node){this._node=node};GraphArc.prototype.getWeight=function(){return this._weight};GraphArc.prototype.setWeight=function(weight){this._weight=weight};return GraphArc}();exports.GraphArc=GraphArc;var GraphNode=function(){function GraphNode(){this._arcList=new list.SimpleList}GraphNode.prototype.setValue=function(value){this._value=value;return this};GraphNode.prototype.getValue=function(){return this._value};GraphNode.prototype.setIsMarked=function(marked){this._isMarked=marked;return this};GraphNode.prototype.getIsMarked=function(){return this._isMarked};GraphNode.prototype.getArcListIterator=function(){return this._arcList.getIterator()};GraphNode.prototype.addArc=function(node,weight){var arc=new GraphArc;arc.setNode(node);arc.setWeight(weight);this._arcList.append(arc);return this};GraphNode.prototype.findArc=function(node){var iterator=this._arcList.getIterator();for(iterator.start();iterator.isValid();iterator.forth()){if(iterator.getItem().getNode()==node){return iterator.getItem()}}return null};GraphNode.prototype.removeArc=function(node){var iterator=this._arcList.getIterator();for(iterator.start();iterator.isValid();iterator.forth()){if(iterator.getItem().getNode()==node){this._arcList.remove(iterator);return true}}return null};return GraphNode}();exports.GraphNode=GraphNode;var Graph=function(){function Graph(){this._nodes=[];this._count=0}Graph.prototype.getCount=function(){return this._count};Graph.prototype.addNode=function(data,index){if(this._nodes[index]!=null){return false}this._nodes[index]=new GraphNode;this._nodes[index].setValue(data);this._nodes[index].setIsMarked(false);this._count++;return true};Graph.prototype.removeNode=function(index){if(this._nodes[index]==null){return null}var nodeIndex;var arc;var nodeLength=this._nodes.length;for(nodeIndex=0;nodeIndex<nodeLength;nodeIndex++){if(this._nodes[nodeIndex]!=null){arc=this._nodes[nodeIndex].findArc(this._nodes[nodeIndex]);if(arc!=null){this.removeArc(nodeIndex,index)}}}this._nodes[index]=null;this._count--;return this};Graph.prototype.addArc=function(indexNodeFrom,indexNodeTo,weight){if(this._nodes[indexNodeFrom]==null||this._nodes[indexNodeTo]==null){return false}if(this._nodes[indexNodeFrom].findArc(this._nodes[indexNodeTo])!=null){return false}this._nodes[indexNodeFrom].addArc(this._nodes[indexNodeTo],weight);return true};Graph.prototype.removeArc=function(indexNodeFrom,indexNodeTo){if(this._nodes[indexNodeFrom]==null||this._nodes[indexNodeTo]==null){return false}this._nodes[indexNodeFrom].removeArc(this._nodes[indexNodeTo]);return this};Graph.prototype.findNode=function(index){if(this._nodes[index]==null){return null}return this._nodes[index]};Graph.prototype.findArc=function(indexNodeFrom,indexNodeTo){if(this._nodes[indexNodeFrom]==null||this._nodes[indexNodeTo]==null){return null}return this._nodes[indexNodeFrom].findArc(this._nodes[indexNodeTo])};Graph.prototype._clearMarks=function(){var index;var nodesLenght=this._nodes.length;for(index=0;index<nodesLenght;index++){if(this._nodes[index]!=null){this._nodes[index].setIsMarked(false)}}};Graph.prototype.depthFirst=function(node,func){if(node==null){return}this._clearMarks();func(node);node.setIsMarked(true);var iterator;iterator=node.getArcListIterator();for(iterator.start();iterator.isValid();iterator.forth()){if(iterator.getItem().getNode().getIsMarked()==false){this.depthFirst(iterator.getItem().getNode(),func)}}};Graph.prototype.breadthFirst=function(node,func){if(node==null){return}this._clearMarks();var queue=new Queue_1.Queue;var iterator;queue.enqueue(node);node.setIsMarked(true);while(queue.getCount()!=0){func(queue.peek());iterator=queue.peek().getArcListIterator();for(iterator.start();iterator.isValid();iterator.forth()){if(iterator.getItem().getNode().getIsMarked()==false){iterator.getItem().getNode().setIsMarked(true);queue.enqueue(iterator.getItem().getNode())}}queue.dequeue()}};return Graph}();exports.Graph=Graph},{"./LinkedList":7,"./Queue":8}],5:[function(require,module,exports){"use strict";var LinkedList_1=require("./LinkedList");var HashTable=function(){function HashTable(func){if(func===void 0){func=HashTable.getSumAllCharCode}this._modulo=19;this._hashFunction=func;this._count=0;this._table=[]}HashTable.getSumAllCharCode=function(word){var lengthWord=word.length;var sum=0;for(var i=0;i<lengthWord;i++){sum+=word.charCodeAt(i)}return sum};HashTable.prototype.calculateHash=function(key){return this._hashFunction(key.toString())%this._modulo};HashTable.prototype.existsIndex=function(index){if(this._table[index]==undefined){return false}return true};HashTable.prototype.increaceCount=function(){this._count++};HashTable.prototype.decreaseCount=function(){this._count--};HashTable.prototype.insert=function(key,value){var entry={value:value,key:key};var index=this.calculateHash(key);if(this.existsIndex(index)==false){this._table[index]=new LinkedList_1.SimpleList}this._table[index].append(entry);this.increaceCount();return this};HashTable.prototype.find=function(key){var index=this.calculateHash(key);if(this.existsIndex(index)==false){return null}var iterador=this._table[index].getIterator();while(iterador.isValid()){if(iterador.getItem().key==key){return iterador.getItem().value}iterador.forth()}return null};HashTable.prototype.remove=function(key){var index=this.calculateHash(key);if(this.existsIndex(index)==false){return null}var iterador=this._table[index].getIterator();while(iterador.isValid()){if(iterador.getItem().key==key){this._table[index].remove(iterador);return this}iterador.forth()}this.decreaseCount();return null};return HashTable}();exports.HashTable=HashTable},{"./LinkedList":7}],6:[function(require,module,exports){"use strict";var Heap=function(){function Heap(func){this._arr=[];this._comparer=func;this._count=0}Heap.prototype.getCount=function(){return this._count};Heap.prototype.getItem=function(){return this._arr[this._count]};Heap.prototype.enqueue=function(value){this._count++;this._arr[this._count]=value;this.walkUp(this._count);return this};Heap.prototype._calcParentIndex=function(index){return Math.round(index/2)-1};Heap.prototype.walkUp=function(index){var parentIndex=this._calcParentIndex(index);var childIndex=index;var temp=this._arr[childIndex];while(parentIndex>0){if(this._comparer(temp,this._arr[parentIndex])==false){this._arr[childIndex]=this._arr[parentIndex];parentIndex=this._calcParentIndex(parentIndex)}else{break}}this._arr[childIndex]=temp;return this};Heap.prototype.dequeue=function(){if(this._count>=1){this._arr[1]=this._arr[this._count];this.walkDown(1);this._count--}return this};Heap.prototype.walkDown=function(index){var parentIndex=index;var childIndex=index*2;var temp=this._arr[parentIndex];while(childIndex<this._count){if(childIndex<this._count-1){if(this._comparer(this._arr[childIndex],this._arr[childIndex+1])){childIndex++}}if(this._comparer(temp,this._arr[childIndex])){this._arr[parentIndex]=this._arr[childIndex];parentIndex=childIndex;childIndex*=2}else{break}}this._arr[parentIndex]=temp};return Heap}();exports.Heap=Heap},{}],7:[function(require,module,exports){"use strict";var SimpleList=function(){function SimpleList(){this._head=null;this._tail=null;this._count=0}SimpleList.prototype.getHead=function(){return this._head};SimpleList.prototype.getCount=function(){return this._count};SimpleList.prototype.getTail=function(){return this._tail};SimpleList.prototype.append=function(value){if(this._head==null){var node=new ListNode;this._head=node;this._tail=node;this._head.setValue(value)}else{this._tail.insertAfter(value);this._tail=this._tail.getNext()}this._count++;return this};SimpleList.prototype.prepend=function(value){var newNode=new ListNode;newNode.setValue(value);newNode.setNext(this._head);this._head=newNode;if(this._tail==null){this._tail=this._head}this._count++;return this};SimpleList.prototype.removeHead=function(){if(this._head!=null){var newNode=null;newNode=this._head.getNext();this._head=newNode;if(this._head==null){this._tail=null}this._count--}return this};SimpleList.prototype.removeTail=function(){var headNodePointer=this._head;if(this._head!=null){if(this._head==this._tail){this._head=null;this._tail=null}else{while(headNodePointer.getNext()!=this._tail){headNodePointer=headNodePointer.getNext()}this._tail=headNodePointer;headNodePointer.setNext(null)}this._count--}return this};SimpleList.prototype.getIterator=function(){return new SimpleListIterator(this,this._head)};SimpleList.prototype.insert=function(iterator,value){if(iterator.getList()!=this){return}if(iterator.getNode()!=null){iterator.getNode().insertAfter(value);if(iterator.getNode()==this._tail){this._tail=iterator.getNode().getNext()}this._count++}else{this.append(value)}return this};SimpleList.prototype.remove=function(iterator){var headNodePointer=this._head;if(iterator.getList()!=this){return}if(iterator.getNode()==null){return}if(iterator.getNode()==this._head){iterator.forth();this.removeHead()}else{while(headNodePointer.getNext()!=iterator.getNode()){headNodePointer=headNodePointer.getNext()}iterator.forth();if(headNodePointer.getNext()==this._tail){this._tail=headNodePointer}headNodePointer.setNext(null);headNodePointer.setNext(iterator.getNode())}return this};return SimpleList}();exports.SimpleList=SimpleList;var SimpleListIterator=function(){function SimpleListIterator(list,node){if(list===void 0){list=null}if(node===void 0){node=null}this._mainNode=node;this._list=list}SimpleListIterator.prototype.getList=function(){return this._list};SimpleListIterator.prototype.getNode=function(){return this._mainNode};SimpleListIterator.prototype.start=function(){if(this._list!=null){this._mainNode=this._list.getHead()}return this};SimpleListIterator.prototype.forth=function(){if(this._mainNode!=null){this._mainNode=this._mainNode.getNext()}return this};SimpleListIterator.prototype.getItem=function(){return this._mainNode.getValue()};SimpleListIterator.prototype.isValid=function(){return this._mainNode!=null};return SimpleListIterator}();exports.SimpleListIterator=SimpleListIterator;var ListNode=function(){function ListNode(){this._next=null}ListNode.prototype.insertAfter=function(value){var newNode=new ListNode;newNode._data=value;newNode._next=this._next;this._next=newNode};ListNode.prototype.setValue=function(value){this._data=value;return this};ListNode.prototype.getValue=function(){return this._data};ListNode.prototype.getNext=function(){return this._next};ListNode.prototype.setNext=function(value){this._next=value;return this};return ListNode}();exports.ListNode=ListNode},{}],8:[function(require,module,exports){"use strict";var Queue=function(){function Queue(){this._count=0;this._front=0;this._queue=[]}Queue.prototype.peek=function(){return this._queue[this._front]};Queue.prototype.enqueue=function(value){this._queue[this._count]=value;this._count++;return this};Queue.prototype.dequeue=function(){if(this._isEmpty()==true){return false}this._front++;this._count--;return this};Queue.prototype.getCount=function(){return this._count};Queue.prototype._isEmpty=function(){if(this._count==0){return true}return false};return Queue}();exports.Queue=Queue},{}],9:[function(require,module,exports){"use strict";var Stack=function(){function Stack(){this._top=0;this._array=[]}Stack.prototype.push=function(value){this._array[this._top]=value;this._top++;return this};Stack.prototype.pop=function(){if(this.isEmpty()===false){this._top--}return this};Stack.prototype.peek=function(){return this._array[this._top-1]};Stack.prototype.getCount=function(){return this._top};Stack.prototype.isEmpty=function(){if(this._top==0){return true}return false};return Stack}();exports.Stack=Stack},{}],10:[function(require,module,exports){"use strict";var DLL=require("./DoubleLinkedList");var Tree=function(){function Tree(value){this._parent=null;this._value=value;this._children=new DLL.DoubleLinkedList}Tree.prototype.getValue=function(){return this._value};Tree.prototype.getChildren=function(){return this._children};Tree.prototype.setParent=function(parent){this._parent=parent};Tree.prototype.getParent=function(){return this._parent};Tree.prototype.getCount=function(){var count=1;var iterator=this._children.getIterator();for(iterator.start();iterator.isValid();iterator.forth()){count+=iterator.getItem().getCount()}return count};Tree.prototype.destroy=function(){var iterator=this._children.getIterator();var node;iterator.start();while(iterator.isValid()){node=iterator.getItem();this._children.remove(iterator)}return this};return Tree}();exports.Tree=Tree;var TreeIterator=function(){function TreeIterator(node){if(node===void 0){node=null}this._node=node;this._resetIterator()}TreeIterator.prototype.getCurrentTree=function(){return this._node};TreeIterator.prototype.setCurrentTree=function(tree){this._node=tree};TreeIterator.prototype._resetIterator=function(){if(this._node!=null){this._childIterator=this._node.getChildren().getIterator()}else{this._childIterator=null}return this};TreeIterator.prototype.goRoot=function(){while(this._node.getParent()!=null){this._node=this._node.getParent()}this._resetIterator();return this};TreeIterator.prototype.goUp=function(){if(this._node!=null){this._node=this._node.getParent()}this._resetIterator();return this};TreeIterator.prototype.goDown=function(){if(this._childIterator.isValid()){this._node=this._childIterator.getItem();this._resetIterator()}return this};TreeIterator.prototype.childForth=function(){this._childIterator.forth();return this};TreeIterator.prototype.childBack=function(){this._childIterator.backward();return this};TreeIterator.prototype.childStart=function(){this._childIterator.start();return this};TreeIterator.prototype.childEnd=function(){while(this._childIterator.isValid()){this._childIterator.forth()}return this};TreeIterator.prototype.childIsValid=function(){return this._childIterator.isValid()};TreeIterator.prototype.appendChild=function(child){child.setParent(this._node);this._childIterator.getList().append(child);this._resetIterator()};TreeIterator.prototype.prependChild=function(child){this._childIterator.getList().prepend(child);return this};TreeIterator.prototype.insertChildBefore=function(child){this._childIterator.backward().getList().insert(this._childIterator,child);return this};TreeIterator.prototype.insertChildAfter=function(child){this._childIterator.forth().getList().insert(this._childIterator,child);return this};return TreeIterator}();exports.TreeIterator=TreeIterator},{"./DoubleLinkedList":3}]},{},[1]);